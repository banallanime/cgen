#!/usr/bin/env node

const fs = require('node:fs');
const path = require('node:path');
const util = require('node:util');
const copy_paste = require("clipboardy");
const toml = require('toml');

const default_settings = {
	type: "intern-map",
	language: "C",
	name: "AutoGenerated",
	namespace: undefined,
};
const valid_settings = {
	type: ["InternMap", "HashMap"],
	language: ["C", "C++", "fcc"],
	hashType: ["default", "djb2"]
}

const cli_config = {
	options: {
		in: {
			type: "string",
			short: "i"
		},
		out: {
			type: "string",
			short: "o",
			default: undefined,
		},
	},
	strict: true,

}
const arguments = util.parseArgs(cli_config)

if (!fs.existsSync(arguments.values["in"])) {
	console.error("File does not exist")
	process.exit(-1)
}
if (!fs.lstatSync(arguments.values["in"]).isFile()) {
	console.error("Provided input path is not a file")
	process.exit(-1)
}
// Input file properties
let input_file
try {
	input_file = fs.readFileSync(arguments.values.in, 'utf8');
} catch (err) {
	console.error(err);
}
let input_file_name = path.basename(arguments.values["in"])
let input_table

switch (input_file_name.split('.').pop()) {
	case "json":
		input_table = JSON.parse(input_file)
		break
	case "yaml", "yml":

		break
	case "toml":
		input_table = toml.parse(input_file)

		break
	default:
		console.warn("Unknown file type, assuming json")
		settings.file_type = "json"
		break

}

if (input_table.Project == null) {
	console.error("Input file contains no projects")
	process.exit(-1)
}
let out_buffer = ""
input_table.Project.forEach(project => {
	if (project.KeyPair == undefined) {
		console.error("Project missing KeyPair member")
		process.exit(-1)
	}
	if (project.Settings == undefined) {
		console.error("Project missing Setting member")
		process.exit(-1)
	}
	// Check if settings are valid
	const settings = { ...default_settings, ...project.Settings }
	for (const [key, value] of Object.entries(settings)) {
		if (!(key in default_settings)) {
			console.log(key, value)
			console.error("Invalid option in settings")
			process.exit(-1)
		}
		if (valid_settings.hasOwnProperty(key)
			&& !valid_settings[key].includes(value)) {
			console.log(key)
			console.error("Invalid value for option in settings")
			process.exit(-1)
		}
	}

	switch (settings.type) {
		case "InternMap":
			let offset = 0;
			for (let k in project.KeyPair) {
				out_buffer += `#define ${k} ${offset}\n`;
				offset += project.KeyPair[k].length;
			}
			out_buffer += `\nconst char ${settings.name}[] =\n`;

			for (let v of Object.values(project.KeyPair)) {
				if(v[0] == '#')
					out_buffer += `\t${v}\n`;
				else
					out_buffer += `\t"${v}"\n`;
			}
			out_buffer += ";";
			break
		case "HashMap":
			break
		default:

			break
	}
})

if(out_buffer == ""){
	process.exit(0x01)
}
if (arguments.values.out != undefined) {
	try {
		console.log(input_table)
		console.log(out_buffer)
		fs.writeFileSync(arguments.values.out, out_buffer)
	} catch (error) {
		process.exit(error)
	}
}
else {
	console.log("Text sent to clipboard")
	copy_paste.default.writeSync(out_buffer)
}